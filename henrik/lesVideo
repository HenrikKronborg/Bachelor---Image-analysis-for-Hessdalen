#!/usr/bin/env python3

import cv2
import numpy as np
import time
import os
import math
from datetime import datetime, timedelta

video = "21-02-2018_09:42:30";
datetime_object = datetime.strptime(video, "%d-%m-%Y_%H:%M:%S");

capture = cv2.VideoCapture("../Videoer/" + video + ".mp4")
mask = cv2.imread("mask.png")

grayMask = cv2.cvtColor(mask, cv2.COLOR_BGR2GRAY)
retvalMask, thresholdMask = cv2.threshold(grayMask, 0, 255, cv2.THRESH_BINARY_INV)

def analyseVideo(frame, frameNumber):
	grayFrame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
	retval, threshold = cv2.threshold(grayFrame, 200, 255, cv2.THRESH_BINARY)
	
	maskMultiply = cv2.bitwise_and(threshold, thresholdMask)
	
	params = cv2.SimpleBlobDetector_Params()
	
	params.minThreshold = 100;
	params.maxThreshold = 260;

	params.filterByColor = False
	params.blobColor = 255 #høgt tall er hvitt, små tall er mørkt

	params.filterByArea = True
	params.minArea = 30 #Sette størrelsen på piksel til stjerne
	params.maxArea = 4000

	params.filterByCircularity = False #Disse må være med, blir satt standard til true
	params.filterByConvexity = False
	params.filterByInertia = False

	detector = cv2.SimpleBlobDetector_create(params)
	keypoints = detector.detect(maskMultiply)
	
	if not keypoints:
		return 0
	else:
		im_with = cv2.drawKeypoints(frame, keypoints, np.array([]), (0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
		
		frameTime = datetime_object + timedelta(seconds=frameNumber / 30)
		
		if not(os.path.exists("../Detections/Pictures/" + str(frameTime.strftime("%d-%m-%Y_%H:%M:%S")) + ".jpg")):
			cv2.imwrite("../Detections/Pictures/" + str(frameTime.strftime("%d-%m-%Y_%H:%M:%S")) + ".jpg", frame, [int(cv2.IMWRITE_JPEG_QUALITY), 100])
			cv2.imwrite("../Detections/Pictures/" + str(frameTime.strftime("%d-%m-%Y_%H:%M:%S")) + "_marked.jpg", im_with, [int(cv2.IMWRITE_JPEG_QUALITY), 100])
		
		return 1


frameNumber = 0
while(capture.isOpened()):
	ret, frame = capture.read()
	
	if ret == False:
		break
	
	analyseVideo(frame, frameNumber)
	frameNumber += 1

capture.release()
cv2.destroyAllWindows()
